import type { GetStaticProps, InferGetStaticPropsType, NextPage } from "next";
import Head from "next/head";
import { Breed } from "../types";
import { ChangeEvent, useState } from "react";
import Image from "next/image";
import Link from "next/link";

const Home: NextPage<{ allBreeds: Breed[] }> = ({
  allBreeds,
}: InferGetStaticPropsType<typeof getStaticProps>) => {
  const [currentSelected, setCurrentSelected] = useState("All");

  const breedsToShow =
    currentSelected === "All"
      ? allBreeds
      : allBreeds.filter((breed) => breed.name.includes(currentSelected));

  const handleSelectChange = (e: ChangeEvent<HTMLSelectElement>) => {
    setCurrentSelected(e.target.value);
  };

  if (!allBreeds) {
    return <div>Loading...</div>;
  }

  if (allBreeds.length === 0) {
    return <div>Empty</div>;
  }

  return (
    <>
      <Head>
        <title>Doginfo</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="min-h-screen w-full bg-base-200">
        <main className="w-full space-y-8 p-4">
          <form className="mx-auto max-w-7xl" action="">
            <select
              className="select select-bordered w-full max-w-xs text-lg"
              onChange={handleSelectChange}
              defaultValue={currentSelected}
            >
              <option value="All">All</option>
              {allBreeds?.map((breed) => {
                return (
                  <option key={breed.id} value={breed.name}>
                    {breed.name}
                  </option>
                );
              })}
            </select>
          </form>

          <section className="mx-auto flex max-w-7xl flex-wrap gap-6">
            {breedsToShow?.map((breed: Breed) => {
              return (
                <div
                  className="card-compact card w-72 bg-base-100 shadow-xl"
                  key={breed.id}
                >
                  <figure>
                    <Image
                      src={breed?.image?.url}
                      width={500}
                      height={333.33}
                      alt="Dog"
                    />
                  </figure>
                  <div className="card-body">
                    <h2 className="card-title">{breed?.name}</h2>
                    <p>{breed.temperament}</p>
                    <div className="card-actions justify-end">
                      <Link href={`/pet/${breed.id}`}>
                        <a>
                          <button className="btn btn-primary">Details</button>
                        </a>
                      </Link>
                    </div>
                  </div>
                </div>
              );
            })}
          </section>
        </main>
      </div>
    </>
  );
};

export default Home;

export const getStaticProps: GetStaticProps<{
  allBreeds: Breed[];
}> = async () => {
  try {
    const response = await fetch("https://apimocha.com/aboutdogs/v1/breeds", {
      headers: {
        "x-api-key": `${process.env.API_KEY}`,
      },
    }).then((res) => res.json());

    const allBreeds: Breed[] = response;

    if (allBreeds.length === 0) {
      throw new Error();
    }

    return {
      props: {
        allBreeds,
      },
    };
  } catch (err) {
    return {
      props: {
        allBreeds: [],
      },
    };
  }
};
