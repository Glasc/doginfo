import type { GetStaticProps, InferGetStaticPropsType, NextPage } from "next";
import Head from "next/head";
import { Breed } from "../types";

const Home: NextPage<{ allBreeds: Breed[] }> = ({
  allBreeds,
}: InferGetStaticPropsType<typeof getStaticProps>) => {

  if (!allBreeds) {
    return <div>Loading...</div>;
  }

  return (
    <>
      <Head>
        <title>Doginfo</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="min-h-screen w-full bg-base-100">
        <main className="inline-block bg-base-200 p-4">
          <form action="">
            <select className="select w-full max-w-xs" defaultValue="none">
              {/* <option value="affenpinscher">Affenpinscher</option>} */}
              {allBreeds.map((breed) => {
                return (
                  <option key={breed.id} value={breed.name}>
                    {breed.name}
                  </option>
                );  
              })}
            </select>
          </form>
        </main>
      </div>
    </>
  );
};

export default Home;

export const getStaticProps: GetStaticProps<{
  allBreeds: Breed[];
}> = async () => {
  const res = await fetch("https://apimocha.com/doginfomock/v1/breeds", {
    headers: {
      "x-api-key":
        "live_myBGb0QYE0HaJvJtmh8UGREqo6OzVgCJc2vbVmglbptyrFHVtooWqmFETZtnAdzz",
    },
  });

  const allBreeds: Breed[] = await res.json();

  if (!allBreeds) {
    return {
      props: {
        allBreeds: [],
      },
    };
  }

  return {
    props: {
      allBreeds,
    },
  };
};
